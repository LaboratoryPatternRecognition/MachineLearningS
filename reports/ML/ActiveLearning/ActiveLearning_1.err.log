Traceback (most recent call last):
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Dr\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from modAL.models import ActiveLearner
from sklearn.neighbors import KNeighborsClassifier

# Define a simple synthetic data generator
def generate_synthetic_instance(bounds):
    return np.random.uniform(bounds[:, 0], bounds[:, 1], size=(1, bounds.shape[0]))

# Define the bounds of the feature space
bounds = np.array([[-5, 5], [-5, 5]])

# Define the oracle function (simulating a human annotator)
def oracle(x):
    return int((x[0, 0]**2 + x[0, 1]**2) < 4)

# Initialize a K-Nearest Neighbors classifier with n_neighbors=1
learner = ActiveLearner(
    estimator=KNeighborsClassifier(n_neighbors=1),
    X_training=np.array([[0, 0]]), 
    y_training=np.array([oracle(np.array([[0, 0]]))])
)

# Perform Membership Query Synthesis with subplots
n_queries = 10
fig, axes = plt.subplots(2, 5, figsize=(15, 6))  # Create a grid of 2 rows and 5 columns
axes = axes.flatten()  # Flatten the axes array for easy indexing

for i in range(n_queries):
    # Generate a synthetic instance
    synthetic_instance = generate_synthetic_instance(bounds)
    
    # Query the oracle for its label
    label = oracle(synthetic_instance)
    
    # Teach the learner with the synthetic instance
    learner.teach(X=synthetic_instance, y=np.array([label]))
    
    # Plot the decision boundary
    x1, x2 = np.meshgrid(np.linspace(bounds[0, 0], bounds[0, 1], 100), 
                         np.linspace(bounds[1, 0], bounds[1, 1], 100))
    grid = np.c_[x1.ravel(), x2.ravel()]
    predictions = learner.predict(grid).reshape(x1.shape)
    axes[i].contourf(x1, x2, predictions, alpha=0.3)
    axes[i].scatter(synthetic_instance[:, 0], synthetic_instance[:, 1], c='red', s=100)
    axes[i].set_title(f'Query {i + 1}')  # Add frame number as the title
    axes[i].set_xlim(bounds[0, 0], bounds[0, 1])  # Set x limits
    axes[i].set_ylim(bounds[1, 0], bounds[1, 1])  # Set y limits
    axes[i].axis('off')  # Turn off axes for a cleaner look

plt.tight_layout()  # Adjust subplots to fit in the figure area
plt.show()

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 3[0m
[0;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m----> 3[0m [38;5;28;01mfrom[39;00m [38;5;21;01mmodAL[39;00m[38;5;21;01m.[39;00m[38;5;21;01mmodels[39;00m [38;5;28;01mimport[39;00m ActiveLearner
[0;32m      4[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mneighbors[39;00m [38;5;28;01mimport[39;00m KNeighborsClassifier
[0;32m      6[0m [38;5;66;03m# Define a simple synthetic data generator[39;00m

[1;31mModuleNotFoundError[0m: No module named 'modAL'

