Traceback (most recent call last):
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Dr\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from metric_learn import NCA
from sklearn.datasets import make_classification

# Step 1: Create a synthetic dataset with 2 classes
np.random.seed(42)
class_1 = 2*np.random.randn(50, 2) + np.array([2, 2])  # Class Ï‰1 centered at (2, 2)
class_2 = np.random.randn(50, 2) + np.array([-2, -2])  # Class Ï‰2 centered at (-2, -2)

X = np.vstack((class_1, class_2))
Y = np.hstack((np.zeros(50), np.ones(50)))  # Labels: 0 for Ï‰1, 1 for Ï‰2

# Step 2: Apply NCA
nca = NCA(max_iter=1000)
X_nca = nca.fit_transform(X, Y)

# Step 3: Visualization
plt.figure(figsize=(10, 4))

# Before NCA
plt.subplot(1, 2, 1)
plt.scatter(X[Y == 0, 0], X[Y == 0, 1], color='r', label=r'$\omega_1$')
plt.scatter(X[Y == 1, 0], X[Y == 1, 1], color='b', label=r'$\omega_2$')
plt.title("Before NCA")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.legend()

# After NCA
plt.subplot(1, 2, 2)
plt.scatter(X_nca[Y == 0, 0], X_nca[Y == 0, 1], color='r', label=r'$\omega_1$')
plt.scatter(X_nca[Y == 1, 0], X_nca[Y == 1, 1], color='b', label=r'$\omega_2$')
plt.title("After NCA")
plt.xlabel("Transformed Feature 1")
plt.ylabel("Transformed Feature 2")
plt.legend()

plt.tight_layout()
plt.show()

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 3[0m
[0;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m----> 3[0m [38;5;28;01mfrom[39;00m [38;5;21;01mmetric_learn[39;00m [38;5;28;01mimport[39;00m NCA
[0;32m      4[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mdatasets[39;00m [38;5;28;01mimport[39;00m make_classification
[0;32m      6[0m [38;5;66;03m# Step 1: Create a synthetic dataset with 2 classes[39;00m

[1;31mModuleNotFoundError[0m: No module named 'metric_learn'

